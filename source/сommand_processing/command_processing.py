import random

from ..settings import  NAME_VOICE_ASSISTANT
from ..utils.utils import load_to_json, convert_time_to_words
from ..utils.app_manager import AppManager


class Comand_Processsing:
    def __init__(self, app_manager: AppManager):
        self.commands = load_to_json()
        self.__name_command = NAME_VOICE_ASSISTANT
        self.app_manager = app_manager

    def __prepare_command(self, voice_text: str):
        voice_text = voice_text.lower()
        if self.__name_command in voice_text:
            return voice_text.replace(self.__name_command, "").strip()
        return None

    def get_command(self, voice_text: str):
        prepared_text = self.__prepare_command(voice_text)
        if prepared_text is None:
            return None
        return self.choose_command(prepared_text)

    def choose_command(self, prepared_text: str):
        if self.__is_empty_command(prepared_text): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
            return self._handle_empty_command()
        for key, value in self.commands.items():
            if key == "":
                continue
            if prepared_text.startswith(key.lower()):
                if value['type'] == 'text':
                    response = random.choice(value.get("response", [""]))
                    print(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞: {key} -> {response}") #!!!!!!!
                    return response

                elif value['type'] == 'action':
                    response = random.choice(value.get("response", [""]))
                    action_name = value.get("action")
                    program_name = value.get("program_name")
                    if action_name.startswith("close"):
                        self.app_manager.close_program(program_name)
                    else:
                        self.app_manager.run_program(program_name)
                    return response
                elif value['type'] == 'data_text':
                    time_in_words = convert_time_to_words()
                    response_options = [
                        f"–°–µ–π—á–∞—Å {time_in_words}",
                        f"–í—Ä–µ–º—è: {time_in_words}",
                        f"–ù–∞ —á–∞—Å–∞—Ö: {time_in_words}"
                    ]
                    return random.choice(response_options)
                else:
                    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {value['type']}")
                    return "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."
        print(f"üîç –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {prepared_text}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É."

    def __is_empty_command(self, prepared_text: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–æ–π (—Ç.–µ. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∏–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)."""
        return prepared_text == "" and "" in self.commands

    def _handle_empty_command(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∏–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        value = self.commands[""]
        if value["type"] == "text":
            return random.choice(value.get("response", [""]))
        else:
            return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
